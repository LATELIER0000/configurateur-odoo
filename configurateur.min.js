// Configurateur de Prix L'Atelier - Version GitHub Corrigée
(function() {
    'use strict';
    
    // Vérifier que le DOM est prêt
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initConfigurator);
    } else {
        initConfigurator();
    }
    
    function initConfigurator() {
        console.log('🚀 Initialisation du configurateur depuis GitHub...');
        
        // Variables globales
        let data = [], step = 1, selections = {}, user = null;
        
        // Utilitaires DOM
        const $ = id => document.getElementById(id);
        const $$ = sel => document.querySelectorAll(sel);
        
        // Configuration par défaut (sera écrasée par CONFIGURATEUR_CONFIG si présent)
        const CONFIG = Object.assign({
            csvUrl: 'https://raw.githubusercontent.com/LATELIER0000/configurateur-odoo/main/configurateur_data.csv',
            phoneNumber: '+33139510575',
            repairTimes: { 'Écran': '30-45 min', 'Batterie': '20-30 min', 'Châssis': '1-2h' },
            odooConfig: {
                serverUrl: 'https://www.latelier.app',
                loginUrl: 'https://www.latelier.app/web/login',
                appointmentUrl: 'https://www.latelier.app/appointment/'
            }
        }, window.CONFIGURATEUR_CONFIG || {});
        
        console.log('⚙️ Configuration chargée:', CONFIG);
        
        // Utilitaires d'affichage
        const showLoading = () => {
            const loading = $('loading');
            const error = $('error');
            const form = $('form');
            
            if (loading) loading.style.display = 'block';
            if (error) error.classList.add('hidden');
            if (form) form.classList.add('hidden');
        };
        
        const showError = (message = 'Erreur de chargement') => {
            const loading = $('loading');
            const error = $('error');
            
            if (loading) loading.style.display = 'none';
            if (error) {
                error.textContent = message;
                error.classList.remove('hidden');
            }
            console.error('❌', message);
        };
        
        const showForm = () => {
            const loading = $('loading');
            const error = $('error');
            const form = $('form');
            
            if (loading) loading.style.display = 'none';
            if (error) error.classList.add('hidden');
            if (form) form.classList.remove('hidden');
        };
        
        // Chargement des données CSV
        const loadData = async () => {
            try {
                console.log('📡 Chargement CSV depuis:', CONFIG.csvUrl);
                
                const response = await fetch(CONFIG.csvUrl);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const csv = await response.text();
                console.log('📄 CSV reçu, taille:', csv.length, 'caractères');
                
                // Parser le CSV
                const lines = csv.replace(/^\uFEFF/, '').trim().split('\n');
                if (lines.length < 2) {
                    throw new Error('Fichier CSV vide ou invalide');
                }
                
                const headers = lines[0].split(';');
                console.log('📋 En-têtes CSV:', headers);
                
                data = lines.slice(1).map(line => {
                    const values = line.split(';');
                    const row = {};
                    headers.forEach((header, index) => {
                        row[header] = values[index] || '';
                    });
                    return row;
                });
                
                console.log('✅ Données parsées:', data.length, 'lignes');
                
                // Vérifier qu'on a des données valides
                if (data.length === 0) {
                    throw new Error('Aucune donnée trouvée dans le CSV');
                }
                
                // Vérifier les colonnes essentielles
                const sampleRow = data[0];
                const hasMarque = 'Marque' in sampleRow;
                const hasSerie = 'Série' in sampleRow;
                const hasModele = 'Modèle' in sampleRow;
                const hasReparation = 'Type de réparation' in sampleRow;
                
                if (!hasMarque || !hasSerie || !hasModele || !hasReparation) {
                    console.warn('⚠️ Colonnes manquantes détectées:', {
                        hasMarque, hasSerie, hasModele, hasReparation
                    });
                }
                
                return true;
            } catch (error) {
                console.error('❌ Erreur chargement CSV:', error);
                throw error;
            }
        };
        
        // Fonctions de filtrage intelligent
        const getAvailableOptions = (currentSelections = {}) => {
            const available = {
                repairs: new Set(),
                qualities: new Set(), 
                brands: new Set(),
                series: new Set(),
                models: new Set()
            };
            
            try {
                const filtered = data.filter(row => {
                    // Vérifier qu'il y a un prix
                    const priceKey = Object.keys(row).find(k => k.includes('Prix') && k.includes('Standard'));
                    const hasPrice = priceKey && row[priceKey] && row[priceKey].toString().trim() !== "" && row[priceKey] !== "0";
                    
                    return hasPrice &&
                        (!currentSelections.repair || row["Type de réparation"] === currentSelections.repair) &&
                        (!currentSelections.quality || row["Qualité"] === currentSelections.quality) &&
                        (!currentSelections.brand || row["Marque"] === currentSelections.brand) &&
                        (!currentSelections.series || row["Série"] === currentSelections.series) &&
                        (!currentSelections.model || row["Modèle"] === currentSelections.model);
                });
                
                filtered.forEach(row => {
                    if (row["Type de réparation"]) available.repairs.add(row["Type de réparation"]);
                    if (row["Qualité"]) available.qualities.add(row["Qualité"]);
                    if (row["Marque"]) available.brands.add(row["Marque"]);
                    if (row["Série"]) available.series.add(row["Série"]);
                    if (row["Modèle"]) available.models.add(row["Modèle"]);
                });
                
            } catch (error) {
                console.error('❌ Erreur filtrage:', error);
            }
            
            return available;
        };
        
        // Création d'options
        const createOption = (value, icon, title, subtitle, isAvailable, type) => {
            const div = document.createElement('div');
            div.className = `option ${!isAvailable ? 'disabled' : ''}`;
            div.setAttribute('data-value', value);
            
            div.innerHTML = `
                <div class="option-icon">${icon}</div>
                <div class="option-title">${title}</div>
                ${subtitle ? `<div class="option-subtitle">${subtitle}</div>` : ''}
                ${!isAvailable ? '<div class="option-subtitle" style="color: #dc3545;">Non disponible</div>' : ''}
            `;
            
            if (isAvailable) {
                div.onclick = () => selectOption(type, value, div);
            }
            
            return div;
        };
        
        // Sélection d'option avec filtrage
        const selectOption = (type, value, element) => {
            console.log(`🎯 Sélection: ${type} = ${value}`);
            
            // Vérifier disponibilité
            const available = getAvailableOptions(selections);
            const typeMap = { repair: 'repairs', quality: 'qualities', brand: 'brands', series: 'series', model: 'models' };
            
            if (!available[typeMap[type]].has(value)) {
                console.warn('⚠️ Option non disponible:', value);
                return;
            }
            
            // Désélectionner les autres
            element.parentElement.querySelectorAll('.option').forEach(opt => opt.classList.remove('selected'));
            element.classList.add('selected');
            
            // Sauvegarder
            selections[type] = value;
            
            // Actions spécifiques selon le type
            if (type === 'repair' || type === 'quality') {
                refreshAllOptions();
            } else if (type === 'brand') {
                selections.series = '';
                selections.model = '';
                populateSeries();
                refreshAllOptions();
            } else if (type === 'series') {
                selections.model = '';
                populateModels();
                refreshAllOptions();
            } else if (type === 'model') {
                calculatePrice();
                return;
            }
            
            updateSummary();
            
            // Avancer automatiquement
            if (step < 5) {
                setTimeout(() => {
                    step++;
                    showStep(step);
                    updateProgress();
                }, 300);
            }
        };
        
        // Population des options avec filtrage
        const populateOptions = (containerId, options, type) => {
            const container = $(containerId);
            if (!container) return;
            
            container.innerHTML = '';
            const available = getAvailableOptions(selections);
            
            options.forEach(opt => {
                const isAvailable = available[type + 's'].has(opt.value);
                const option = createOption(opt.value, opt.icon, opt.title, opt.subtitle, isAvailable, type);
                container.appendChild(option);
                
                if (selections[type] === opt.value && isAvailable) {
                    option.classList.add('selected');
                }
            });
        };
        
        // Population spécialisée
        const populateRepairs = () => {
            populateOptions('repairOptions', [
                { value: 'Écran', icon: '📱', title: 'Écran', subtitle: 'Réparation d\'écran' },
                { value: 'Batterie', icon: '🔋', title: 'Batterie', subtitle: 'Remplacement' },
                { value: 'Châssis', icon: '🛡️', title: 'Châssis', subtitle: 'Réparation' }
            ], 'repair');
        };
        
        const populateQualities = () => {
            populateOptions('qualityOptions', [
                { value: 'Compatible', icon: '💰', title: 'Compatible', subtitle: 'Pièce économique' },
                { value: 'Origine', icon: '✨', title: 'Origine', subtitle: 'Pièce premium' }
            ], 'quality');
        };
        
        const populateBrands = () => {
            if (!data.length) return;
            
            const brands = [...new Set(data.map(r => r["Marque"]).filter(Boolean))].sort()
                .map(brand => ({ value: brand, icon: '📱', title: brand }));
            
            populateOptions('brandOptions', brands, 'brand');
        };
        
        const populateSeries = () => {
            if (!selections.brand || !data.length) return;
            
            const series = [...new Set(data.filter(r => r["Marque"] === selections.brand)
                .map(r => r["Série"]).filter(Boolean))].sort()
                .map(s => ({ value: s, icon: '📋', title: s }));
            
            populateOptions('seriesOptions', series, 'series');
        };
        
        const populateModels = () => {
            if (!selections.brand || !selections.series || !data.length) return;
            
            const models = [...new Set(data.filter(r => r["Marque"] === selections.brand && r["Série"] === selections.series)
                .map(r => r["Modèle"]).filter(Boolean))].sort()
                .map(m => ({ value: m, icon: '📲', title: m }));
            
            populateOptions('modelOptions', models, 'model');
        };
        
        const refreshAllOptions = () => {
            populateRepairs();
            populateQualities();
            populateBrands();
            if (selections.brand) populateSeries();
            if (selections.brand && selections.series) populateModels();
        };
        
        // Gestion des étapes
        const showStep = (stepNumber) => {
            $$('.form-step').forEach(s => s.classList.remove('active'));
            const currentStep = $(`step-${stepNumber}`);
            if (currentStep) currentStep.classList.add('active');
            
            $$('.step').forEach((item, index) => {
                const circle = item.querySelector('.step-circle');
                item.classList.remove('active', 'completed');
                circle.classList.remove('active', 'completed');
                
                if (index + 1 < stepNumber) {
                    item.classList.add('completed');
                    circle.classList.add('completed');
                } else if (index + 1 === stepNumber) {
                    item.classList.add('active');
                    circle.classList.add('active');
                }
            });
        };
        
        const updateProgress = () => {
            const progress = ((step - 1) / 4) * 100;
            const progressLine = $('progressLine');
            if (progressLine) {
                progressLine.style.width = `${progress}%`;
            }
        };
        
        // Résumé
        const updateSummary = () => {
            const content = $('summaryContent');
            if (!content) return;
            
            content.innerHTML = '';
            let hasSelections = false;
            
            const items = [
                { key: 'repair', label: 'Type', value: selections.repair },
                { key: 'quality', label: 'Qualité', value: selections.quality },
                { key: 'brand', label: 'Marque', value: selections.brand },
                { key: 'series', label: 'Série', value: selections.series }
            ];
            
            items.forEach(item => {
                if (item.value) {
                    const div = document.createElement('div');
                    div.className = 'summary-item';
                    div.innerHTML = `<span>${item.label} :</span> <span class="summary-value" onclick="editSelection('${item.key}')">${item.value}</span>`;
                    content.appendChild(div);
                    hasSelections = true;
                }
            });
            
            const summary = $('summary');
            if (summary) {
                summary.classList.toggle('visible', hasSelections);
            }
        };
        
        // Calcul du prix
        const calculatePrice = () => {
            const { repair, quality, brand, series, model } = selections;
            
            console.log('💰 Calcul prix pour:', { repair, quality, brand, series, model });
            
            const row = data.find(r =>
                r["Marque"] === brand &&
                r["Série"] === series &&
                r["Modèle"] === model &&
                r["Type de réparation"] === repair &&
                r["Qualité"] === quality
            );
            
            if (row) {
                const priceKey = Object.keys(row).find(key => key.includes("Prix") && key.includes("Standard"));
                const price = row[priceKey];
                
                if (price && price.toString().trim() !== "" && price !== "0") {
                    showPrice(price);
                } else {
                    showUnavailable();
                }
            } else {
                showUnavailable();
            }
        };
        
        const showPrice = (price) => {
            const priceMain = $('priceMain');
            const repairType = $('repairType');
            const deviceInfo = $('deviceInfo');
            const qualityInfo = $('qualityInfo');
            const timeEstimate = $('timeEstimate');
            const priceResult = $('priceResult');
            const contactSection = $('contactSection');
            
            if (priceMain) priceMain.textContent = `${price} €`;
            if (repairType) repairType.textContent = selections.repair;
            if (deviceInfo) deviceInfo.textContent = `${selections.brand} ${selections.series} ${selections.model}`;
            if (qualityInfo) qualityInfo.textContent = selections.quality;
            if (timeEstimate) timeEstimate.textContent = CONFIG.repairTimes[selections.repair] || '30-60 min';
            
            if (priceResult) priceResult.style.display = 'block';
            if (contactSection) contactSection.style.display = 'block';
            
            // Masquer les étapes
            $$('.form-step').forEach(s => s.style.display = 'none');
        };
        
        const showUnavailable = () => {
            const priceMain = $('priceMain');
            if (priceMain) {
                priceMain.textContent = 'Non disponible';
                priceMain.style.color = '#dc3545';
            }
            showPrice('0');
        };
        
        // Fonctions globales
        window.goToStep = (targetStep) => {
            if (targetStep <= step) {
                const priceResult = $('priceResult');
                const contactSection = $('contactSection');
                
                if (priceResult) priceResult.style.display = 'none';
                if (contactSection) contactSection.style.display = 'none';
                
                $$('.form-step').forEach(s => s.style.display = 'block');
                step = targetStep;
                showStep(step);
                updateProgress();
            }
        };
        
        window.resetForm = () => {
            selections = {};
            step = 1;
            
            const priceResult = $('priceResult');
            const contactSection = $('contactSection');
            const summary = $('summary');
            
            if (priceResult) priceResult.style.display = 'none';
            if (contactSection) contactSection.style.display = 'none';
            if (summary) summary.classList.remove('visible');
            
            $$('.form-step').forEach(s => {
                s.style.display = 'block';
                s.classList.remove('active');
            });
            
            $$('.option.selected').forEach(opt => opt.classList.remove('selected'));
            $$('.option.disabled').forEach(opt => {
                opt.classList.remove('disabled');
                opt.style.opacity = '1';
                opt.style.cursor = 'pointer';
                opt.style.pointerEvents = 'auto';
                const unavailable = opt.querySelector('[style*="color: #dc3545"]');
                if (unavailable) unavailable.remove();
            });
            
            const seriesOptions = $('seriesOptions');
            const modelOptions = $('modelOptions');
            if (seriesOptions) seriesOptions.innerHTML = '';
            if (modelOptions) modelOptions.innerHTML = '';
            
            refreshAllOptions();
            showStep(1);
            updateProgress();
        };
        
        window.editSelection = (type) => {
            const stepMap = { repair: 1, quality: 2, brand: 3, series: 4 };
            if (stepMap[type]) {
                window.goToStep(stepMap[type]);
            }
        };
        
        window.handleContact = () => {
            // Sauvegarder les données pour la page RDV
            const appointmentData = {
                userSelections: selections,
                priceInfo: {
                    price: $('priceMain') ? $('priceMain').textContent : '',
                    duration: $('timeEstimate') ? $('timeEstimate').textContent : ''
                },
                timestamp: new Date().toISOString()
            };
            
            localStorage.setItem('latelier_appointment_data', JSON.stringify(appointmentData));
            
            // Redirection vers la page RDV
            if (CONFIG.odooConfig && CONFIG.odooConfig.appointmentUrl) {
                window.location.href = CONFIG.odooConfig.appointmentUrl;
            } else {
                alert('URL de rendez-vous non configurée');
            }
        };
        
        // Initialisation principale
        const init = async () => {
            try {
                showLoading();
                console.log('🚀 Démarrage de l\'initialisation...');
                
                await loadData();
                
                refreshAllOptions();
                
                showForm();
                showStep(1);
                updateProgress();
                
                console.log('✅ Configurateur GitHub initialisé avec succès');
                
            } catch (error) {
                console.error('❌ Erreur d\'initialisation:', error);
                showError(`Impossible de charger les données: ${error.message}`);
            }
        };
        
        // Démarrage
        init();
    }
    
})();
